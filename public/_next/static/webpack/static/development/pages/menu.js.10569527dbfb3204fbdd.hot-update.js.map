{"version":3,"file":"static/webpack/static\\development\\pages\\menu.js.10569527dbfb3204fbdd.hot-update.js","sources":["webpack:///./components/reservation/modalrev.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Button from \"../button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport ContactPhoneIcon from \"@material-ui/icons/ContactPhone\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker\r\n} from \"@material-ui/pickers\";\r\nimport { loadDBFirebase } from \"../../lib/firebase\";\r\nimport Complete from \"./complete\";\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: 0\r\n    },\r\n    \"& .MuiTextField-root\": {\r\n      margin: theme.spacing(1),\r\n      width: \"100%\"\r\n    }\r\n  },\r\n  item: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\"\r\n  }\r\n}));\r\n\r\nexport default function FormDialog(props) {\r\n  const [open, setOpen] = useState(false);\r\n  const [complete, setComplete] = useState(false);\r\n  const [selectedDate, setSelectedDate] = useState(new Date(Date.now()));\r\n  const [selectedTime, setSelectedTime] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [surename, setSureName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [contact, setContact] = useState(\"\");\r\n  const [people, setPeople] = useState(\"\");\r\n  const [request, setRequest] = useState(\"\");\r\n\r\n  const classes = useStyles();\r\n  const times = [\r\n    \"12:00\",\r\n    \"12:30\",\r\n    \"13:00\",\r\n    \"13.30\",\r\n    \"14:00\",\r\n    \"14:30\",\r\n    \"17:30\",\r\n    \"18:00\",\r\n    \"18:30\",\r\n    \"19:00\",\r\n    \"19:30\",\r\n    \"20:00\",\r\n    \"20:30\",\r\n    \"21:00\",\r\n    \"21:30\"\r\n  ];\r\n\r\n  const handleSavetoDB = async () => {\r\n    let firebase = await loadDBFirebase();\r\n    let refDoc = firebase.firestore().collection(\"reservation\");\r\n\r\n    refDoc\r\n      .add({\r\n        name: name,\r\n        surename: surename,\r\n        email: email,\r\n        contact: contact,\r\n        date: selectedDate,\r\n        time: selectedTime,\r\n        people: people,\r\n        request: request,\r\n        confirm: false\r\n      })\r\n      .then(ref => {\r\n        console.log(\"Document written with ID: \", ref.id);\r\n        handleComplete();\r\n      })\r\n      .catch(function(error) {\r\n        console.error(\"Error adding document: \", error);\r\n      });\r\n  };\r\n\r\n  const handleTimeChange = event => {\r\n    setSelectedTime(event.target.value);\r\n  };\r\n\r\n  const handleDateChange = date => {\r\n    setSelectedDate(date);\r\n  };\r\n\r\n  const handleClickOpen = event => {\r\n    event.preventDefault();\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleComplete = event => {\r\n    event.preventDefault();\r\n    setComplete(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    // setComplete(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        className={props.class}\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        onClick={handleClickOpen}\r\n      >\r\n        {props.name}\r\n      </Button>\r\n      <Dialog\r\n        fullWidth={true}\r\n        maxWidth={\"sm\"}\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"form-dialog-title\"\r\n      >\r\n        {complete ? (\r\n          <Complete close={handleClose} />\r\n        ) : (\r\n          <div>\r\n            <DialogTitle id=\"form-dialog-title\">Booking Details</DialogTitle>\r\n            <DialogContent dividers>\r\n              <DialogContentText>\r\n                To subscribe to this website, please enter your email address\r\n                here. We will send updates occasionally.\r\n              </DialogContentText>\r\n              <form className={classes.root} onSubmit={handleComplete}>\r\n                <Grid container spacing={0}>\r\n                  <Grid item sm={6} xs={12} className={classes.item}>\r\n                    <TextField\r\n                      autoFocus\r\n                      required\r\n                      id=\"outlined-required\"\r\n                      label=\"Name\"\r\n                      type=\"text\"\r\n                      value={name}\r\n                      onChange={event => setName(event.target.value)}\r\n                      variant=\"outlined\"\r\n                      InputLabelProps={{\r\n                        shrink: true\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12} className={classes.item}>\r\n                    <TextField\r\n                      id=\"surename\"\r\n                      label=\"Surename\"\r\n                      type=\"text\"\r\n                      value={surename}\r\n                      onChange={event => setSureName(event.target.value)}\r\n                      variant=\"outlined\"\r\n                      InputLabelProps={{\r\n                        shrink: true\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12} className={classes.item}>\r\n                    <TextField\r\n                      required\r\n                      id=\"email\"\r\n                      label=\"Email Address\"\r\n                      type=\"email\"\r\n                      value={email}\r\n                      onChange={event => setEmail(event.target.value)}\r\n                      variant=\"outlined\"\r\n                      InputLabelProps={{\r\n                        shrink: true\r\n                      }}\r\n                      InputProps={{\r\n                        startAdornment: (\r\n                          <InputAdornment position=\"start\">\r\n                            <EmailIcon />\r\n                          </InputAdornment>\r\n                        )\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sm={6} xs={12} className={classes.item}>\r\n                    <TextField\r\n                      required\r\n                      id=\"contact\"\r\n                      label=\"Contact Number\"\r\n                      variant=\"outlined\"\r\n                      type=\"text\"\r\n                      value={contact}\r\n                      onChange={event => setContact(event.target.value)}\r\n                      InputLabelProps={{\r\n                        shrink: true\r\n                      }}\r\n                      InputProps={{\r\n                        startAdornment: (\r\n                          <InputAdornment position=\"start\">\r\n                            <ContactPhoneIcon />\r\n                          </InputAdornment>\r\n                        )\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item sm={4} xs={12} className={classes.item}>\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                      <KeyboardDatePicker\r\n                        disableToolbar\r\n                        required\r\n                        variant=\"inline\"\r\n                        format=\"MM/dd/yyyy\"\r\n                        margin=\"normal\"\r\n                        id=\"date-picker-inline\"\r\n                        label=\"Date\"\r\n                        value={selectedDate}\r\n                        onChange={handleDateChange}\r\n                        KeyboardButtonProps={{\r\n                          \"aria-label\": \"change date\"\r\n                        }}\r\n                      />\r\n                    </MuiPickersUtilsProvider>\r\n                  </Grid>\r\n                  <Grid item sm={4} xs={12} className={classes.item}>\r\n                    <TextField\r\n                      id=\"outlined-select-currency\"\r\n                      select\r\n                      required\r\n                      label=\"Time\"\r\n                      value={selectedTime}\r\n                      onChange={handleTimeChange}\r\n                      variant=\"outlined\"\r\n                    >\r\n                      {times.map((option, index) => (\r\n                        <MenuItem value={option}>{option}</MenuItem>\r\n                      ))}\r\n                    </TextField>\r\n                  </Grid>\r\n                  <Grid item sm={4} xs={12} className={classes.item}>\r\n                    <TextField\r\n                      required\r\n                      id=\"outlined-number\"\r\n                      label=\"Number of Guest :\"\r\n                      type=\"number\"\r\n                      value={people}\r\n                      onChange={event => setPeople(event.target.value)}\r\n                      InputLabelProps={{\r\n                        shrink: true\r\n                      }}\r\n                      variant=\"outlined\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} className={classes.item}>\r\n                    <TextField\r\n                      id=\"outlined-multiline-static\"\r\n                      label=\"Special Requests :\"\r\n                      multiline\r\n                      rows=\"4\"\r\n                      type=\"text\"\r\n                      placeholder=\"special requirement\"\r\n                      variant=\"outlined\"\r\n                      value={request}\r\n                      onChange={event => setRequest(event.target.value)}\r\n                      InputLabelProps={{\r\n                        shrink: true\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\r\n                  <Button type=\"submit\" color=\"primary\">\r\n                    Booking\r\n                  </Button>\r\n                  <Button onClick={handleClose} color=\"primary\">\r\n                    Cancel\r\n                  </Button>\r\n                </div>\r\n              </form>\r\n            </DialogContent>\r\n          </div>\r\n        )}\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","sourceRoot":""}